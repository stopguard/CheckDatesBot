const botToken = '1806755265:AAEfT28OfIPFzvFjjmz77l2Q3BhsZs4hJkM';
const webAppUrl = 'https://script.google.com/macros/s/AKfycbx5HKPT8YzYIN53heCA5NdCBd1ZHeiqezsw_94BR47hXbTYQCayCujBUE3CiG2OVZlzbA/exec';

/* Version 10.06.2021 */
const autoLists = ss.getSheetByName('[svc]AutoLists')                                     // –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø  –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –ª–∏—Å—Ç—É
const botDataList = ss.getSheetByName('[svc]BOT').getRange(1, 2, 2);                      //                  –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞
const defaultObj = JSON.stringify({ 'id': '', 'added': [] });
const emodjiDict = { '–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ': 'üìÉ', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': 'üõ†' };

function setWebhook() {
  const telegramUrl = "https://api.telegram.org/bot" + botToken;
  const url = telegramUrl + "/setWebhook?url=" + webAppUrl;
  Logger.log(UrlFetchApp.fetch(url));
}

function doPost(e) {
  // –ø–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –±–æ—Ç–∞
  let update = JSON.parse(e.postData.contents);
  console.log(update.message)
  alertBOT(update);
};

function alertBOT(update) {
  // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ, –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–∏–ø "—Å–æ–æ–±—â–µ–Ω–∏–µ"
  if (update.hasOwnProperty('message')) {
    let msg = update.message;
    let inputChatID = msg.chat.id;
    Logger.log(parseInt(inputChatID, 10))
    Logger.log(msg)
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∫ –±–æ—Ç—É
    if (msg.hasOwnProperty('entities') && msg.entities[0].type == 'bot_command') {
      let id_names = customList.getRange(2, 1, customList.getLastRow() - 1, 2).getValues();  // –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã ID –∏ –∏–º—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞
      let idNamesObj = {};
      id_names.forEach(el => idNamesObj[el[0]] = el[1]);
      let botData = botDataList.getValues().flat();
      let chats = JSON.parse(botData[0]);           // —á–∞—Ç—ã
      let attentionLists = JSON.parse(botData[1]);  // —Å–ø–∏—Å–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
      let msg_txt = msg.text.split(' ');
      let header = 'ü§∑ –û—à–∏–±–∫–∞!';
      let body = `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID ${msg_txt[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n` +
        `–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–º–æ—â—å—é @corpUfanetbot –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä–Ω–æ–≥–æ ID –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä—è–¥–æ–º —Å –∫–æ–º–∞–Ω–¥–æ–π\n(–Ω–∞–ø—Ä–∏–º–µ—Ä ${msg_txt[0]} 1234)`;
      let existsID = msg_txt.length > 1 && idNamesObj.hasOwnProperty(msg_txt[1]); // –±—ã–≤—à–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∞–π–¥–∏
      // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
      let id;
      let fullName;
      let chatObj;
      let personalID;
      let dateListValues;
      let send;
      let headers = '';
      let bodies = '';
      switch (msg_txt[0]) {
        case '/start':
        case '/help':
          header = '‚Ñπ–ü–æ–º–æ—â—å';
          body = '/my —á–∏—Å–ª–æ - –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ ID –∏ –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /my 1234)\n\n' +
            '/add —á–∏—Å–ª–æ - –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /add 1234)\n\n' +
            '/delmi - –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å–≤–æ—ë–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è—Ö\n\n' +
            '/del - –î–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö ID –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, –¥–æ–±–∞–≤—å—Ç–µ ID –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /del 1234)\n\n' +
            '/attentions - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∫ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–Ω–∞–Ω–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n' +
            '/sum - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–æ —á—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∂–∏—Ç–µ ID\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /sum 1234)\n\n' +
            '/list - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π';
          break;
        case '/my':
          if (msg_txt.length > 1 && existsID) {
            id = msg_txt[1];
            fullName = idNamesObj[id];
            my(inputChatID, id, chats, attentionLists);
            header = 'üìú –£—Å–ø–µ—à–Ω–æ!';
            body = `–í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID –≤—ã–±—Ä–∞–Ω ${id} (<strong>${fullName}</strong>).\n` +
              `–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –ø–æ–≤–µ—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.`;
          };
          break;
        case '/add':
          if (msg_txt.length > 1 && existsID) {
            id = msg_txt[1];
            fullName = idNamesObj[id];
            add(inputChatID, id, chats, attentionLists);
            header = 'üîî –£—Å–ø–µ—à–Ω–æ!';
            body = `ID ${id} (<strong>${fullName}</strong>) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.\n` +
              `–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –ø–æ–≤–µ—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.`;
          };
          break;
        case '/delmi':
          delmi(inputChatID, chats, attentionLists);
          header = 'üóë –£—Å–ø–µ—à–Ω–æ!';
          body = `–û—Å–Ω–æ–≤–Ω–æ–π ID –æ—á–∏—â–µ–Ω.\n` +
            `–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω—ë–º.`;
          break;
        case '/del':
          chatObj = chats.hasOwnProperty(inputChatID) ? chats[inputChatID] : JSON.parse(defaultObj)
          if (msg_txt.length > 1 && chatObj.added.includes(msg_txt[1])) {
            id = msg_txt[1];
            fullName = idNamesObj[id];
            let delResult = delID(inputChatID, id, fullName, chats, attentionLists);
            header = delResult[0];
            body = delResult[1];
            break;
          } else if (msg_txt.length == 1) {
            delAllAdded(inputChatID, chats, attentionLists);
            header = 'üîá –£—Å–ø–µ—à–Ω–æ!';
            body = `–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ID –æ—á–∏—â–µ–Ω.\n` +
              `–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏—Ö.`;
            break;
          };
          body = `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID ${msg_txt[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n` +
            `–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /list –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä—è–¥–æ–º —Å –∫–æ–º–∞–Ω–¥–æ–π\n(–Ω–∞–ø—Ä–∏–º–µ—Ä ${msg_txt[0]} 1234).`;
          break;
        case '/attentions':
          chatObj = chats.hasOwnProperty(inputChatID) ? chats[inputChatID] : JSON.parse(defaultObj);
          id = chatObj.id
          fullName = idNamesObj.hasOwnProperty(id) ? idNamesObj[id] : ""
          if (id != "" && fullName != "") {
            dateListValues = dateList.getRange(3, 6, dateList.getLastRow() - 2, 8).getValues();         // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ –¥–∞—Ç
            personalID = `${fullName} | ${id}`;
            send = attentions(dateListValues, personalID);
            headers = send[0];
            bodies = send[1];
            header = headers[0]
            body = bodies[0]
            for (let i = 1; i < headers.length; i++) {
              body += headers[i];
              body += bodies[i];
            };
          } else {
            header = '‚õî –û—à–∏–±–∫–∞!';
            body = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π ID. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID.';
          }
          sendMessage(header, body, inputChatID);
          header = 0;
          break;
        case '/sum':
          if (msg_txt.length > 1 && existsID) {
            id = msg_txt[1];
            fullName = idNamesObj[id]
          } else if (msg_txt.length == 1) {
            chatObj = chats.hasOwnProperty(inputChatID) ? chats[inputChatID] : JSON.parse(defaultObj);
            id = chatObj.id
            fullName = idNamesObj.hasOwnProperty(id) ? idNamesObj[id] : ""
          } else { break };
          personalID = `${fullName} | ${id}`;
          dateListValues = dateList.getRange(3, 6, dateList.getLastRow() - 2, 8).getValues();         // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ –¥–∞—Ç
          send = summInf(dateListValues, personalID);
          headers = send[0];
          bodies = send[1];
          header = headers[0]
          body = bodies[0]
          for (let i = 1; i < headers.length; i++) {
            body += headers[i];
            body += bodies[i];
          };
          sendMessage(header, body, inputChatID);
          header = 0;
          break;
        case '/list':
          header = 'üóÉ –°–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:';
          body = list(inputChatID, chats, idNamesObj);
          break;
        default:
          header = 'ü§∑ –û—à–∏–±–∫–∞!';
          body = `–ö–æ–º–∞–Ω–¥—ã ${msg_txt[0]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n`;
          break;
      };
      if (header) {
        sendMessage(header, body, inputChatID);
      };
    };
  };
};

function sendMessage(header, body, chat_id) {
  body = body.length < 3700 ? body : body.slice(0, 3700) + '‚Ä¶\n\n –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.';
  let message = '<strong>' + header + '</strong> \n\n' + body;

  //—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let payload = {
    'method': 'sendMessage',
    'chat_id': String(chat_id),
    'text': message,
    'parse_mode': 'HTML'
  };
  let data = {
    "method": "post",
    "payload": payload
  };

  // –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –±–æ—Ç—É
  console.log(('https://api.telegram.org/bot' + botToken + '/' + JSON.stringify(data)).length)
  UrlFetchApp.fetch('https://api.telegram.org/bot' + botToken + '/', data);

};
function my(chat, id, chatsObj, notifyObj) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID –≤ —Ç–∞–±–ª–∏—Ü—É
  let cpChatsObj = JSON.stringify(chatsObj);
  let cpNotifyObj = JSON.stringify(notifyObj);
  let chatObj = chatsObj.hasOwnProperty(chat) ? chatsObj[chat] : JSON.parse(defaultObj);
  let notifyList = notifyObj.hasOwnProperty(id) ? notifyObj[id] : [];
  if (notifyObj.hasOwnProperty(chatObj.id)) {
    notifyObj[chatObj.id] = notifyObj[chatObj.id].filter(el => el != chat);
    if (notifyObj[chatObj.id].length == 0) { delete notifyObj[chatObj.id] }
  }
  chatObj.id = id;
  chatObj.added = chatObj.added.filter(el => el != id);
  chatsObj[chat] = chatObj;
  if (!notifyList.includes(chat)) { notifyList.push(chat) };
  notifyObj[id] = notifyList;
  let strChatsObj = JSON.stringify(chatsObj);
  let strNotifyObj = JSON.stringify(notifyObj);
  if (strChatsObj != cpChatsObj || strNotifyObj != cpNotifyObj) {
    botDataList.setValues([[strChatsObj], [strNotifyObj]]);
  };
};

function add(chat, id, chatsObj, notifyObj) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ ID –≤ —Ç–∞–±–ª–∏—Ü—É
  let cpChatsObj = JSON.stringify(chatsObj);
  let cpNotifyObj = JSON.stringify(notifyObj);
  let chatObj = chatsObj.hasOwnProperty(chat) ? chatsObj[chat] : JSON.parse(defaultObj);
  let notifyList = notifyObj.hasOwnProperty(id) ? notifyObj[id] : [];
  if (chatObj.id != id && !chatObj.added.includes(id)) { chatObj.added.push(id) };
  chatsObj[chat] = chatObj;
  if (!notifyList.includes(chat)) { notifyList.push(chat) };
  notifyObj[id] = notifyList;
  let strChatsObj = JSON.stringify(chatsObj);
  let strNotifyObj = JSON.stringify(notifyObj);
  if (strChatsObj != cpChatsObj || strNotifyObj != cpNotifyObj) {
    botDataList.setValues([[strChatsObj], [strNotifyObj]]);
  };
};

function delmi(chat, chatsObj, notifyObj) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID –≤ —Ç–∞–±–ª–∏—Ü–µ
  let cpChatsObj = JSON.stringify(chatsObj);
  let cpNotifyObj = JSON.stringify(notifyObj);
  let chatObj = chatsObj.hasOwnProperty(chat) ? chatsObj[chat] : JSON.parse(defaultObj);
  let id = chatObj.id
  let notifyList = notifyObj.hasOwnProperty(id) ? notifyObj[id] : [];

  chatObj.id = '';
  if (chatObj.added.length == 0) {
    delete chatsObj[chat]
  } else {
    chatsObj[chat] = chatObj
  };

  notifyList = notifyList.filter(el => el != chat);
  if (notifyList.length == 0) {
    delete notifyObj[id]
  } else {
    notifyObj[id] = notifyList
  };

  let strChatsObj = JSON.stringify(chatsObj);
  let strNotifyObj = JSON.stringify(notifyObj);
  if (strChatsObj != cpChatsObj || strNotifyObj != cpNotifyObj) {
    botDataList.setValues([[strChatsObj], [strNotifyObj]]);
  };
};

function delID(chat, id, name, chatsObj, notifyObj) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ID –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ID –≤ —Ç–∞–±–ª–∏—Ü–µ
  let header;
  let body;
  let cpChatsObj = JSON.stringify(chatsObj);
  let cpNotifyObj = JSON.stringify(notifyObj);
  let chatObj = chatsObj.hasOwnProperty(chat) ? chatsObj[chat] : JSON.parse(defaultObj);
  let notifyList = notifyObj.hasOwnProperty(id) ? notifyObj[id] : [];

  notifyList = chatObj.id != id ? notifyList.filter(el => el != chat) : notifyList;
  if (notifyList.length == 0) {
    delete notifyObj[id]
  } else {
    notifyObj[id] = notifyList
  };

  chatObj.added = chatObj.added.filter(el => el != id)
  if (chatObj.added.length == 0 && chatObj.id == '') {
    delete chatsObj[chat]
  } else {
    chatsObj[chat] = chatObj
  };

  let strChatsObj = JSON.stringify(chatsObj);
  let strNotifyObj = JSON.stringify(notifyObj);
  if (strChatsObj != cpChatsObj || strNotifyObj != cpNotifyObj) {
    botDataList.setValues([[strChatsObj], [strNotifyObj]]);
    header = 'üîï –£—Å–ø–µ—à–Ω–æ!';
    body = `ID ${id} (<strong>${name}</strong>) —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.\n` +
      `–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω—ë–º.`;
  } else {
    header = 'ü§∑ –û—à–∏–±–∫–∞!';
    body = `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö.\n` +
      `–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–º–æ—â—å—é /list –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä–Ω–æ–≥–æ ID –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä—è–¥–æ–º —Å –∫–æ–º–∞–Ω–¥–æ–π\n` +
      `(–Ω–∞–ø—Ä–∏–º–µ—Ä /del 1234)\n` +
      `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π ID, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /delmi.`;
  };
  return [header, body]
};

function delAllAdded(chat, chatsObj, notifyObj) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ID –≤ —Ç–∞–±–ª–∏—Ü–µ
  let cpChatsObj = JSON.stringify(chatsObj);
  let cpNotifyObj = JSON.stringify(notifyObj);
  let chatObj = chatsObj.hasOwnProperty(chat) ? chatsObj[chat] : JSON.parse(defaultObj);

  for (let id of chatObj.added) {
    notifyObj[id] = notifyObj[id].filter(el => el != chat);
    if (notifyObj[id].length == 0) {
      delete notifyObj[id]
    };
  }

  chatObj.added = []
  if (chatObj.id == '') {
    delete chatsObj[chat]
  } else {
    chatsObj[chat] = chatObj
  };

  let strChatsObj = JSON.stringify(chatsObj);
  let strNotifyObj = JSON.stringify(notifyObj);
  if (strChatsObj != cpChatsObj || strNotifyObj != cpNotifyObj) {
    botDataList.setValues([[strChatsObj], [strNotifyObj]]);
  }
};

function list(chat, chatsObj, idNames) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ID –≤ —Ç–∞–±–ª–∏—Ü–µ
  let chatObj = chatsObj.hasOwnProperty(chat) ? chatsObj[chat] : JSON.parse(defaultObj);
  let result = '';
  if (chatObj.id == '') {
    result = '‚ö† –û—Å–Ω–æ–≤–Ω–æ–π –ú–û–õ –Ω–µ –≤—ã–±—Ä–∞–Ω.';
  } else {
    result = `üìú <strong>–û—Å–Ω–æ–≤–Ω–æ–π –ú–û–õ</strong>\n‚úì ${idNames[chatObj.id]} | ${chatObj.id}`;
  };
  if (chatObj.added.length != 0) {
    result += '\n\nüîî <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ú–û–õ—ã</strong>';
    for (let id of chatObj.added) {
      if (!idNames.hasOwnProperty(id)) { continue };
      result += `\n‚úì ${idNames[id]} | ${id}`;
    };
  } else {
    result += `\n\nüì≠ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`;
  };
  return result;
};

function attentions(data, personalID) {
  let header = [`üë∑ ${personalID}`];
  let body = [''];
  let endDate;
  if (personalID == '' || personalID == ' | ') {
    header[0] = '‚õî –û—à–∏–±–∫–∞!';
    body[0] = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π ID. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID.';
    return [header, body];
  };
  let values = arrayGen(data, personalID);
  let ended = values[0];
  let nearest = values[1];
  if (ended.length == 1 && nearest.length == 1) {
    header.push('<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>\n');
    body.push('–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –∏ –°–ò–ó —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return [header, body];
  };
  if (ended.length > 1) {
    header.push('\n<ins><strong>üõë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ended.length; i++) {
      let emodji = emodjiDict[ended[i][1]];
      body[body.length - 1] += `<strong>${emodji} ${ended[i][2]}</strong>\n`;
    };
  };
  if (nearest.length > 1) {
    header.push('\n<ins><strong>‚ö† –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–µ—Å—è—Ü–∞:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < nearest.length; i++) {
      let emodji = emodjiDict[nearest[i][1]];
      endDate = Utilities.formatDate(new Date(nearest[i][7]), "GMT+5", "dd.MM.yyyy")
      body[body.length - 1] += `<strong>${emodji} ${nearest[i][2]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${endDate}\n`;
    };
  };
  return [header, body];
};

function summInf(data, personalID) {
  let header = [`üë∑ ${personalID}`];
  let body = [''];
  let endDate
  if (personalID == '' || personalID == ' | ') {
    header[0] = '‚õî –û—à–∏–±–∫–∞!';
    body[0] = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π ID. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ID.';
    return [header, body];
  };
  let values = arrayGen(data, personalID);
  let ended = values[0];
  let nearest = values[1];
  let near = values[2];
  let ok = values[3];
  if (ended.length == 1 && nearest.length == 1) {
    header.push('<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>\n');
    body.push('–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –∏ –°–ò–ó —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n');
  };
  if (ended.length > 1) {
    header.push('\n<ins><strong>üõë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ended.length; i++) {
      let emodji = emodjiDict[ended[i][1]];
      body[body.length - 1] += `<strong>${emodji} ${ended[i][2]}</strong>\n`;
    };
  };
  if (nearest.length > 1) {
    header.push('\n<ins><strong>‚ö† –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–µ—Å—è—Ü–∞:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < nearest.length; i++) {
      let emodji = emodjiDict[nearest[i][1]];
      endDate = Utilities.formatDate(new Date(nearest[i][7]), "GMT+5", "dd.MM.yyyy")
      body[body.length - 1] += `<strong>${emodji} ${nearest[i][2]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${endDate}\n`;
    };
  };
  if ((ok.length + near.length) > 1) {
    header.push('\n<ins><strong>‚úÖ –í –Ω–æ—Ä–º–µ:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < near.length; i++) {
      let emodji = emodjiDict[near[i][1]];
      endDate = Utilities.formatDate(new Date(near[i][7]), "GMT+5", "dd.MM.yyyy")
      body[body.length - 1] += `<strong>${emodji} ${near[i][2]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${endDate}\n`;
    };
    for (let i = 1; i < ok.length; i++) {
      let emodji = emodjiDict[ok[i][1]];
      endDate = Utilities.formatDate(new Date(ok[i][7]), "GMT+5", "dd.MM.yyyy")
      body[body.length - 1] += `<strong>${emodji} ${ok[i][2]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${endDate}\n`;
    };
  };
  return [header, body];
};

function autoAlerts() {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ –±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö –∫ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  // —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ - –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –æ–± –∏–º–µ—é—â–∏—Ö—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
  let id_names = customList.getRange(2, 1, customList.getLastRow() - 1, 2).getValues();  // –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã ID –∏ –∏–º—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞
  let idNamesObj = {};
  id_names.forEach(el => idNamesObj[el[0]] = el[1]);
  let botData = botDataList.getValues().flat();
  let chats = JSON.parse(botData[0]);           // —á–∞—Ç—ã
  let attentionLists = JSON.parse(botData[1]);  // —Å–ø–∏—Å–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π

  let dateListValues = autoCleaner(idNamesObj, chats, attentionLists);

  let header;
  let body;
  let chatList;
  let fullName;
  let personalID;
  let send;
  let headers;
  let bodies;
  for (let id in attentionLists) {
    if (!idNamesObj.hasOwnProperty(id)) { continue };
    header = '';
    body = '';
    chatList = attentionLists[id];
    fullName = idNamesObj[id]
    personalID = `${fullName} | ${id}`;
    send = attentions(dateListValues, personalID);
    headers = send[0];
    if (headers[1] == '<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>\n') { continue };
    bodies = send[1];
    header = headers[0]
    body = bodies[0]
    for (let i = 1; i < headers.length; i++) {
      body += headers[i];
      body += bodies[i];
    };
    for (let num of chatList) {
      sendMessage(header, body, num);
    };
  };
};

function autoCleaner(idNames = 0, chats = 0, attentionLists = 0) {
  // –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ª—é–¥—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  if (idNames === 0 || chats === 0 || attentionLists === 0) {
    id_names = customList.getRange(2, 1, customList.getLastRow() - 1, 2).getValues();  // –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã ID –∏ –∏–º—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞
    idNames = {};
    id_names.forEach(el => idNames[el[0]] = el[1]);
    botData = botDataList.getValues().flat();
    chats = JSON.parse(botData[0]);           // —á–∞—Ç—ã
    attentionLists = JSON.parse(botData[1]);  // —Å–ø–∏—Å–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
  }
  let data = dateList.getRange(3, 4, dateList.getLastRow() - 2, 10).getValues();         // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ –¥–∞—Ç
  let newData = [];
  let toExitData = []
  for (let line of data) {
    id = line[0]
    if (idNames.hasOwnProperty(id)) {
      newData.push(line);
      toExitData.push(line.slice(2))
    } else {
      newData.push(["", "", "", "", "", "", "", "", "", ""])
    }
  }

  if (JSON.stringify(data) != JSON.stringify(newData)) {
    newData = newData.map(el => el.slice(2, 8));
    dateList.getRange(3, 6, newData.length, 6).setValues(newData);
  }

  let cpAttentionLists = JSON.parse(JSON.stringify(attentionLists));
  let cpChats = JSON.stringify(chats);
  let chatObj;
  for (let id in cpAttentionLists) {
    if (!idNames.hasOwnProperty(id)) {
      for (let chat of attentionLists[id]) {
        chatObj = chats[chat]
        if (chatObj.id == id) {
          chatObj.id = ''
        } else {
          chatObj.added = chatObj.added.filter(el => el != id)
        }
        if (chatObj.added.length == 0 && chatObj.id == '') {
          delete chats[chat]
        } else {
          chats[chat] = chatObj
        };
      }
      delete attentionLists[id]
    }
  }
  let strAttentionsLists = JSON.stringify(attentionLists)
  let strChats = JSON.stringify(chats)
  if(JSON.stringify(cpAttentionLists) != strAttentionsLists || cpChats != strChats) {
    newData = [[strChats], [strAttentionsLists]];
    botDataList.setValues(newData);
  }

  return toExitData
}
