const svcSheet = ss.getSheetByName('[svc]');
const svc2Sheet = ss.getSheetByName('[svc]2');
const botToken = '1775200394:AAGYDccjkESNhsIdSafAgGbBka-_ZtiS1Yg';  // –¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –µ—Å–ª–∏ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å.
const defaultObj = JSON.stringify({ 'id': '', 'name': '', 'str': -1, 'added': {} });
const defaultAdded = JSON.stringify({ 'id': '', 'name': '', 'str': -1 });
const emodjiDict = { '–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ)': 'üìÉ', '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è)': 'üñã', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)': 'üõ†' };

function doPost(e) {
  // –ø–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –±–æ—Ç–∞
  let update = JSON.parse(e.postData.contents);
  alertBOT(update);
};

function setWebhook() {
  // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ö—É–∫–æ–≤
  const webAppUrl = "https://script.google.com/macros/s/AKfycbxHbBTo3wJ-5sk7zIEfqxsbF3BeEhpypC53RfQXGDJOnZDUk4__QhOvfpc6X33egKnL1g/exec";
  const telegramUrl = "https://api.telegram.org/bot" + botToken; 
  const url = telegramUrl + "/setWebhook?url=" + webAppUrl;
  let response = UrlFetchApp.fetch(url);
  console.log(response)
}

function alertBOT(update) {
  // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ, –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–∏–ø "—Å–æ–æ–±—â–µ–Ω–∏–µ"
  if (update.hasOwnProperty('message')) {
    let msg = update.message;
    let inputChatID = msg.chat.id;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∫ –±–æ—Ç—É
    if (msg.hasOwnProperty('entities') && msg.entities[0].type == 'bot_command') {
      let id_names = docsList.getRange(5, 1, docsList.getLastRow() - 4, 2).getValues();  // –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏ –∏–º—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞
      let ids = id_names.map(itm => String(itm[0]));      // –∞–π–¥–∏—à–Ω–∏–∫–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      let names = id_names.map(itm => String(itm[1]));    // –∏–º–µ–Ω–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      let svc2Values = svc2Sheet.getRange(1, 1, svc2Sheet.getLastRow() + 1, 3).getValues();   // —Å—Ç—è–≥–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
      let chats = svc2Values.map(itm => String(itm[0]));  // —á–∞—Ç—ã
      let emptyLine = chats.indexOf('') == -1 ? chats.length : chats.indexOf(''); // –ø–µ—Ä–≤–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è —è—á–µ–π–∫–∞ –≤ –ª–∏—Å—Ç–µ —á–∞—Ç–æ–≤
      let chatLine = chats.indexOf(String(inputChatID)) != -1 ? chats.indexOf(String(inputChatID)) : emptyLine;
      let msg_txt = msg.text.split(' ');
      let header = 'ü§∑ –û—à–∏–±–∫–∞!';
      let body = `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ${msg_txt[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n` +
        `–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–º–æ—â—å—é @corpUfanetbot –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Ä–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä—è–¥–æ–º —Å –∫–æ–º–∞–Ω–¥–æ–π\n(–Ω–∞–ø—Ä–∏–º–µ—Ä ${msg_txt[0]} 1234)`;
      let idLine = msg_txt.length > 1 ? ids.indexOf(msg_txt[1]) : -1;
      // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
      let data;
      let chatObj;
      let personalID;
      let toDay;
      let docsListValues;
      let send;
      let headers = '';
      let bodies = '';
      switch (msg_txt[0]) {
        case '/start':
        case '/help':
          header = '‚Ñπ–ü–æ–º–æ—â—å';
          body = '/my —á–∏—Å–ª–æ - –î–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /my 1234)\n\n' +
            '/add —á–∏—Å–ª–æ - –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /add 1234)\n\n' +
            '/delmi - –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ —Å–≤–æ—ë–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è—Ö\n\n' +
            '/del - –î–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, –¥–æ–±–∞–≤—å—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /del 1234)\n\n' +
            '/attentions - –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∫ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–Ω–∞–Ω–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n' +
            '/docs - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–æ–∫–æ–≤ –∏–º–µ—é—â–∏—Ö—Å—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π\n\n' +
            '/instr - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–æ–∫–æ–≤ –∏–º–µ—é—â–µ–≥–æ—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n' +
            '/sum - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–æ —á—Ç–æ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∂–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä\n(–Ω–∞–ø—Ä–∏–º–µ—Ä /sum 1234)\n\n' +
            '/list - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π';
          break;
        case '/my':
          if (msg_txt.length > 1 && idLine >= 0) {
            my(inputChatID, ids[idLine], names[idLine], idLine, chatLine);
            header = 'üìú –£—Å–ø–µ—à–Ω–æ!';
            body = `–í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω ${ids[idLine]} (<strong>${names[idLine]}</strong>).\n` +
              `–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –ø–æ–≤–µ—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.`;
            break;
          };
          break;
        case '/add':
          if (msg_txt.length > 1 && idLine >= 0) {
            add(inputChatID, ids[idLine], names[idLine], idLine, chatLine);
            header = 'üîî –£—Å–ø–µ—à–Ω–æ!';
            body = `–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ${ids[idLine]} (<strong>${names[idLine]}</strong>) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.\n` +
              `–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –ø–æ–≤–µ—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.`;
            break;
          };
          break;
        case '/delmi':
          delmi(inputChatID, chatLine);
          header = 'üóë –£—Å–ø–µ—à–Ω–æ!';
          body = `–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ—á–∏—â–µ–Ω.\n` +
            `–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω—ë–º.`;
          break;
        case '/del':
          if (msg_txt.length > 1 && idLine >= 0) {
            delID(inputChatID, ids[idLine], idLine, chatLine);
            header = 'üîï –£—Å–ø–µ—à–Ω–æ!';
            body = `–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ${ids[idLine]} (<strong>${names[idLine]}</strong>) —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.\n` +
              `–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω—ë–º.`;
            break;
          } else if (msg_txt.length == 1) {
            delAllAdded(inputChatID, chatLine);
            header = 'üîá –£—Å–ø–µ—à–Ω–æ!';
            body = `–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω.\n` +
              `–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏—Ö.`;
            break;
          };
          body = `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–±–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ${msg_txt[1]} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n` +
            `–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /list –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä—è–¥–æ–º —Å –∫–æ–º–∞–Ω–¥–æ–π\n(–Ω–∞–ø—Ä–∏–º–µ—Ä ${msg_txt[0]} 1234).`;
          break;
        case '/attentions':
          data = svc2Sheet.getRange(chatLine + 1, 2).getValue();
          chatObj = data == '' ? JSON.parse(defaultObj) : JSON.parse(data);
          personalID = [chatObj.name, chatObj.id, chatObj.str + 4];
          toDay = personalList.getRange(4, 5).getValue();                                                             // –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
          docsListValues = docsList.getRange(1, 1, docsList.getLastRow(), docsList.getLastColumn()).getValues();      // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π
          instrListValues = instrList.getRange(1, 1, instrList.getLastRow(), instrList.getLastColumn()).getValues();  //                           –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
          send = attentions(personalID, toDay, docsListValues, instrListValues);
          headers = send[0];
          bodies = send[1];
          header = headers[0]
          body = bodies[0]
          for (let i = 1; i < headers.length; i++) {
            body += headers[i];
            body += bodies[i];
          };
          sendMessage(header, body, inputChatID);
          header = 0;
          break;
        case '/docs':
          data = svc2Sheet.getRange(chatLine + 1, 2).getValue();
          chatObj = data == '' ? JSON.parse(defaultObj) : JSON.parse(data);
          personalID = [chatObj.name, chatObj.id, chatObj.str + 4]
          toDay = personalList.getRange(4, 5).getValue();                                                             // –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
          docsListValues = docsList.getRange(1, 1, docsList.getLastRow(), docsList.getLastColumn()).getValues();      // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π
          send = docs(personalID, toDay, docsListValues);
          headers = send[0];
          bodies = send[1];
          header = headers[0]
          body = bodies[0]
          for (let i = 1; i < headers.length; i++) {
            body += headers[i];
            body += bodies[i];
          };
          sendMessage(header, body, inputChatID);
          header = 0;
          break;
        case '/instr':
          data = svc2Sheet.getRange(chatLine + 1, 2).getValue();
          chatObj = data == '' ? JSON.parse(defaultObj) : JSON.parse(data);
          personalID = [chatObj.name, chatObj.id, chatObj.str + 4]
          toDay = personalList.getRange(4, 5).getValue();                                                             // –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
          instrListValues = instrList.getRange(1, 1, instrList.getLastRow(), instrList.getLastColumn()).getValues();  // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
          send = instr(personalID, toDay, instrListValues);
          headers = send[0];
          bodies = send[1];
          header = headers[0]
          body = bodies[0]
          for (let i = 1; i < headers.length; i++) {
            body += headers[i];
            body += bodies[i];
          };
          sendMessage(header, body, inputChatID);
          header = 0;
          break;
        case '/sum':
          data = svc2Sheet.getRange(chatLine + 1, 2).getValue();
          chatObj = data == '' ? JSON.parse(defaultObj) : JSON.parse(data);
          if (msg_txt.length > 1 && idLine >= 0) {
            personalID = [names[idLine], msg_txt[1], idLine + 4];
          } else if (msg_txt.length == 1) {
            personalID = [chatObj.name, chatObj.id, chatObj.str + 4];
          } else { break };
          toDay = personalList.getRange(4, 5).getValue();                                                             // –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
          docsListValues = docsList.getRange(1, 1, docsList.getLastRow(), docsList.getLastColumn()).getValues();      // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π
          instrListValues = instrList.getRange(1, 1, instrList.getLastRow(), instrList.getLastColumn()).getValues();  //                           –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
          send = summInf(personalID, toDay, docsListValues, instrListValues);
          headers = send[0];
          bodies = send[1];
          header = headers[0]
          body = bodies[0]
          for (let i = 1; i < headers.length; i++) {
            body += headers[i];
            body += bodies[i];
          };
          sendMessage(header, body, inputChatID);
          header = 0;
          break;
        case '/list':
          header = 'üóÉ –°–ø–∏—Å–æ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:';
          body = list(chatLine);
          break;
        default:
          header = 'ü§∑ –û—à–∏–±–∫–∞!';
          body = `–ö–æ–º–∞–Ω–¥—ã ${msg_txt[0]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n`;
          break;
      };
      if (header) {
        sendMessage(header, body, inputChatID);
      };
    };
  };
};

function sendMessage(header, body, chat_id) {
  body = body.length < 3700 ? body : body.slice(0, 3700) + '‚Ä¶\n\n –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.';
  let message = '<strong>' + header + '</strong> \n\n' + body;

  //—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let payload = {
    'method': 'sendMessage',
    'chat_id': String(chat_id),
    'text': message,
    'parse_mode': 'HTML'
  };
  let data = {
    "method": "post",
    "payload": payload
  };

  // –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –±–æ—Ç—É
  UrlFetchApp.fetch('https://api.telegram.org/bot' + botToken + '/', data);
  console.log(('https://api.telegram.org/bot' + botToken + '/' + JSON.stringify(data)).length)

};

function my(chat, id, name, idLine, chatLine) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
  let data = svc2Sheet.getRange(1, 1, Math.max(svc2Sheet.getLastRow(), idLine + 1, chatLine + 1), 3).getValues();
  let cpData = JSON.stringify(data);
  let chatObj = data[chatLine][1] == '' ? JSON.parse(defaultObj) : JSON.parse(data[chatLine][1]);
  let idObj = data[idLine][2] == '' ? {} : JSON.parse(data[idLine][2]);
  let oldIDObj = chatObj.str >= 0 ? JSON.parse(data[chatObj.str][2]) : {};
  if (chatObj.id != id) {
    if (JSON.stringify(oldIDObj) != '{}') {
      delete oldIDObj[chat];
      delete chatObj.added[chatObj.id];
      data[chatObj.str][2] = JSON.stringify(oldIDObj);
    };
    delete chatObj.added[id];
    chatObj.id = id;
    chatObj.name = name;
    chatObj.str = idLine;
    data[chatLine][0] = chat;
    data[chatLine][1] = JSON.stringify(chatObj);
  }
  idObj[chat] = chat;
  data[idLine][2] = JSON.stringify(idObj);
  if (JSON.stringify(data) != cpData) {
    svc2Sheet.getRange(1, 1, data.length, 3).setValues(data);
  };
};

function add(chat, id, name, idLine, chatLine) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
  let data = svc2Sheet.getRange(1, 1, Math.max(svc2Sheet.getLastRow(), idLine + 1, chatLine + 1), 3).getValues();
  let cpData = JSON.stringify(data);
  let chatObj = data[chatLine][1] == '' ? JSON.parse(defaultObj) : JSON.parse(data[chatLine][1]);
  let idObj = data[idLine][2] == '' ? {} : JSON.parse(data[idLine][2]);
  if (chatObj.id != id) {
    chatObj.added[id] = JSON.parse(defaultAdded);
    chatObj.added[id].id = id;
    chatObj.added[id].name = name;
    chatObj.added[id].str = idLine;
    data[chatLine][0] = chat;
    data[chatLine][1] = JSON.stringify(chatObj);
    idObj[chat] = chat;
    data[idLine][2] = JSON.stringify(idObj);
    if (JSON.stringify(data) != cpData) {
      svc2Sheet.getRange(1, 1, data.length, 3).setValues(data);
    };
  };
};

function delmi(chat, chatLine) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
  let data = svc2Sheet.getRange(1, 1, svc2Sheet.getLastRow(), 3).getValues();
  let cpData = JSON.stringify(data);
  let chatObj = data[chatLine][1] == '' ? JSON.parse(defaultObj) : JSON.parse(data[chatLine][1]);
  let oldIDObj = chatObj.str >= 0 ? JSON.parse(data[chatObj.str][2]) : {};
  if (chatObj.id != '') {
    delete oldIDObj[chat];
    delete chatObj.added[chatObj.id];
    data[chatObj.str][2] = JSON.stringify(oldIDObj);
    chatObj.id = '';
    chatObj.name = '';
    chatObj.str = -1;
    data[chatLine][0] = chat;
    data[chatLine][1] = JSON.stringify(chatObj);
  };
  if (data[chatLine][1] == defaultObj) {
    data[chatLine][0] = '';
    data[chatLine][1] = '';
  };
  if (JSON.stringify(data) != cpData) {
    svc2Sheet.getRange(1, 1, data.length, 3).setValues(data);
  };
};

function delID(chat, addedID, idLine, chatLine) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ID –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
  let data = svc2Sheet.getRange(1, 1, svc2Sheet.getLastRow(), 3).getValues();
  let cpData = JSON.stringify(data);
  let chatObj = data[chatLine][1] == '' ? JSON.parse(defaultObj) : JSON.parse(data[chatLine][1]);
  let idObj = data[idLine][2] == '' ? {} : JSON.parse(data[idLine][2]);
  if (JSON.stringify(chatObj.added) != '{}') {
    if (addedID != chatObj.id) {
      delete idObj[chat];
    };
    delete chatObj.added[addedID];
    data[chatLine][0] = chat;
    data[chatLine][1] = JSON.stringify(chatObj);
  };
  data[idLine][2] = JSON.stringify(idObj);
  if (data[chatLine][1] == defaultObj) {
    data[chatLine][0] = '';
    data[chatLine][1] = '';
  };
  if (JSON.stringify(data) != cpData) {
    svc2Sheet.getRange(1, 1, data.length, 3).setValues(data);
  };
};

function delAllAdded(chat, chatLine) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
  let data = svc2Sheet.getRange(1, 1, svc2Sheet.getLastRow(), 3).getValues();
  let cpData = JSON.stringify(data);
  let chatObj = data[chatLine][1] == '' ? JSON.parse(defaultObj) : JSON.parse(data[chatLine][1]);
  if (JSON.stringify(chatObj.added) != '{}') {
    let chatObjTmp = JSON.parse(JSON.stringify(chatObj));
    for (let idInAdded in chatObj.added) {
      let idObjInAdded = chatObj.added[idInAdded];
      Logger.log(JSON.stringify(idObjInAdded));
      let idObj = JSON.parse(data[idObjInAdded.str][2]);
      if (idObjInAdded.id != chatObj.id) {
        delete idObj[chat];
      };
      delete chatObjTmp.added[idObjInAdded.id];
      data[idObjInAdded.str][2] = JSON.stringify(idObj);
    };
    data[chatLine][0] = chat;
    data[chatLine][1] = JSON.stringify(chatObjTmp);
  };
  if (data[chatLine][1] == defaultObj) {
    data[chatLine][0] = '';
    data[chatLine][1] = '';
  };
  if (JSON.stringify(data) != cpData) {
    svc2Sheet.getRange(1, 1, data.length, 3).setValues(data);
  };
};



function list(chatLine) {
  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
  let data = svc2Sheet.getRange(1, 1, svc2Sheet.getLastRow(), 3).getValues();
  let chatObj = data[chatLine][1] == '' ? JSON.parse(defaultObj) : JSON.parse(data[chatLine][1]);
  let result = '';
  if (chatObj.id == '') {
    result = '‚ö† –û—Å–Ω–æ–≤–Ω–æ–π –ú–û–õ –Ω–µ –≤—ã–±—Ä–∞–Ω.';
  } else {
    result = `üìú <strong>–û—Å–Ω–æ–≤–Ω–æ–π –ú–û–õ</strong>\n‚úì ${chatObj.name} | ${chatObj.id}`;
  };
  if (JSON.stringify(chatObj.added) != '{}') {
    result += '\n\nüîî <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ú–û–õ—ã</strong>';
    for (let idInAdded in chatObj.added) {
      let idObjInAdded = chatObj.added[idInAdded];
      result += `\n‚úì ${idObjInAdded.name} | ${idObjInAdded.id}`;
    };
  } else {
    result += `\n\nüì≠ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`;
  };
  return result;
};

function attentions(personalID, toDay, docsListValues, instrListValues) {
  let header = [`üë∑ ${personalID[0]} | ${personalID[1]}`];
  let body = [''];
  if (personalID[1] == '') {
    header[0] = '‚õî –û—à–∏–±–∫–∞!';
    body[0] = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.';
    return [header, body];
  };
  let values = arrayGen(docsListValues, instrListValues, personalID, toDay);
  let ended = values[0];
  let close = values[1];
  if (ended.length == 1 && close.length == 1) {
    header.push('<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>');
    body.push('–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –∏ –°–ò–ó —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return [header, body];
  };
  if (ended.length > 1) {
    header.push('\n<ins><strong>üõë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ended.length; i++) {
      let emodji = emodjiDict[ended[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ended[i][1]}</strong>\n`;
    };
  };
  if (close.length > 1) {
    header.push('\n<ins><strong>‚ö† –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–µ—Å—è—Ü–∞:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < close.length; i++) {
      let emodji = emodjiDict[close[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${close[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${close[i][3]}\n`;
    };
  };
  return [header, body];
};

function docs(personalID, toDay, docsListValues) {
  let header = [`üë∑ ${personalID[0]} | ${personalID[1]}`];
  let body = [''];
  if (personalID[1] == '') {
    header[0] = '<strong>‚õî –û—à–∏–±–∫–∞!</strong>';
    body[0] = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.';
    return [header, body];
  };
  let values = arrayGen(docsListValues, [[]], personalID, toDay);
  let ended = values[0];
  let close = values[1];
  let ok = values[2];
  if (ended.length == 1 && close.length == 1) {
    header.push('<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>\n');
    body.push('–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n');
  };
  if (ended.length > 1) {
    header.push('\n<ins><strong>üõë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ended.length; i++) {
      let emodji = emodjiDict[ended[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ended[i][1]}</strong>\n`;
    };
  };
  if (close.length > 1) {
    header.push('\n<ins><strong>‚ö† –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–µ—Å—è—Ü–∞:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < close.length; i++) {
      let emodji = emodjiDict[close[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${close[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${close[i][3]}\n`;
    };
  };
  if (ok.length > 1) {
    header.push('\n<ins><strong>‚úÖ –í –Ω–æ—Ä–º–µ:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ok.length; i++) {
      let emodji = emodjiDict[ok[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ok[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${ok[i][3]}\n`;
    };
  };
  return [header, body];
};

function instr(personalID, toDay, instrListValues) {
  let header = [`üë∑ ${personalID[0]} | ${personalID[1]}`];
  let body = [''];
  if (personalID[1] == '') {
    header[0] = '<strong>‚õî –û—à–∏–±–∫–∞!</strong>';
    body[0] = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.';
    return [header, body];
  };
  let values = arrayGen([[]], instrListValues, personalID, toDay);
  let ended = values[0];
  let close = values[1];
  let ok = values[2];
  if (ended.length == 1 && close.length == 1) {
    header.push('<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>\n');
    body.push('–°–ò–ó —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n');
  };
  if (ended.length > 1) {
    header.push('\n<ins><strong>üõë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ended.length; i++) {
      let emodji = emodjiDict[ended[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ended[i][1]}</strong>\n`;
    };
  };
  if (close.length > 1) {
    header.push('\n<ins><strong>‚ö† –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–µ—Å—è—Ü–∞:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < close.length; i++) {
      let emodji = emodjiDict[close[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${close[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${close[i][3]}\n`;
    };
  };
  if (ok.length > 1) {
    header.push('\n<ins><strong>‚úÖ –í –Ω–æ—Ä–º–µ:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ok.length; i++) {
      let emodji = emodjiDict[ok[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ok[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${ok[i][3]}\n`;
    };
  };
  return [header, body];
};

function summInf(personalID, toDay, docsListValues, instrListValues) {
  let header = [`üë∑ ${personalID[0]} | ${personalID[1]}`];
  let body = [''];
  if (personalID[1] == '') {
    header[0] = '<strong>‚õî –û—à–∏–±–∫–∞!</strong>';
    body[0] = '–ù–µ –≤—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /my –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.';
    return [header, body];
  };
  let values = arrayGen(docsListValues, instrListValues, personalID, toDay);
  let ended = values[0];
  let close = values[1];
  let ok = values[2];
  if (ended.length == 1 && close.length == 1) {
    header.push('<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>\n');
    body.push('–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –∏ –°–ò–ó —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n');
  };
  if (ended.length > 1) {
    header.push('\n<ins><strong>üõë –ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ended.length; i++) {
      let emodji = emodjiDict[ended[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ended[i][1]}</strong>\n`;
    };
  };
  if (close.length > 1) {
    header.push('\n<ins><strong>‚ö† –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –º–µ—Å—è—Ü–∞:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < close.length; i++) {
      let emodji = emodjiDict[close[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${close[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${close[i][3]}\n`;
    };
  };
  if (ok.length > 1) {
    header.push('\n<ins><strong>‚úÖ –í –Ω–æ—Ä–º–µ:</strong></ins>\n');
    body.push('');
    for (let i = 1; i < ok.length; i++) {
      let emodji = emodjiDict[ok[i][1].split('(')[1]];
      body[body.length - 1] += `<strong>${emodji} ${ok[i][1]}</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${ok[i][3]}\n`;
    };
  };
  return [header, body];
};

function autoAlerts() {
  let id_names = docsList.getRange(5, 1, docsList.getLastRow() - 4, 2).getValues();  // –∏–º–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã —Ç–∞–±–µ–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏ –∏–º—ë–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞
  let ids = id_names.map(itm => String(itm[0]));      // –∞–π–¥–∏—à–Ω–∏–∫–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
  let names = id_names.map(itm => String(itm[1]));    // –∏–º–µ–Ω–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
  let toDay = personalList.getRange(4, 5).getValue();                                                             // –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ —è—á–µ–π–∫–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
  let docsListValues = docsList.getRange(1, 1, docsList.getLastRow(), docsList.getLastColumn()).getValues();      // –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–∏—Å—Ç–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π
  let instrListValues = instrList.getRange(1, 1, instrList.getLastRow(), instrList.getLastColumn()).getValues();  //                           –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
  let svc2Values = svc2Sheet.getRange(1, 3, svc2Sheet.getLastRow(), 1).getValues().map(itm => String(itm[0]));
  for (let i = 0; i < svc2Values.length; i++) {
    let header = '';
    let body = '';
    if (svc2Values[i] != '' && svc2Values[i] != '{}') {
      let chatList = Object.keys(JSON.parse(svc2Values[i]));
      let personalID = [names[i], ids[i], i + 4];
      let send = attentions(personalID, toDay, docsListValues, instrListValues);
      let headers = send[0];
      let bodies = send[1];
      header += headers[0]
      for (let num = 0; num < chatList.length; num++) {
        if (headers[1] == '<ins><strong>üëç –û—Ç–ª–∏—á–Ω–æ!</strong></ins>') { break };
        for (let j = 1; j < headers.length; j++) {
          body += headers[j];
          body += bodies[j];
        };
        sendMessage(header, body, chatList[num]);
      };
    };
  };
};
